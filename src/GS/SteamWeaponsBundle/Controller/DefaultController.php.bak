<?php

namespace GS\SteamWeaponsBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use GS\SteamWeaponsBundle\Entity\Weapon;
use GS\SteamWeaponsBundle\Entity\Collection;

use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;

class DefaultController extends Controller
{

    /**
     * @Route("/get/weapons/{collectionName}")
     */
    public function getWeaponCollectionAction($collectionName = null)
    {
        $em = $this->getDoctrine();

        if($collectionName == null){
            $collection = $em->getRepository('GSSteamWeaponsBundle:Collection')->findAll();
            $collection = $collection[0];
        }else{
            $collection = $em->getRepository('GSSteamWeaponsBundle:Collection')->findOneBy(array('name' => $collectionName));
        }

        $weapons = $this->getDoctrine()
            ->getRepository('GSSteamWeaponsBundle:Weapon')
            ->findBy(array('collection' => $collection));

        $encoders = array(new XmlEncoder(), new JsonEncoder());
        $normalizers = array(new ObjectNormalizer());
        $serializer = new Serializer($normalizers, $encoders);
        $jsonContent = $serializer->serialize($weapons, 'json');

        echo $jsonContent;
        die();
    }
    /**
    * @Route("/steam/login/")
    */
    public function steamloginAction()
    {
        $url = $this->get('router')->generate('login_validate', [] ,true);
        echo '<a href="' . $this->genUrl($url) . '">Login</a>';

        die();
    }


    const STEAM_LOGIN = 'https://steamcommunity.com/openid/login';

    /**
     * Get the URL to sign into steam
     *
     * @param mixed returnTo URI to tell steam where to return, MUST BE THE FULL URI WITH THE PROTOCOL
     * @param bool useAmp Use &amp; in the URL, true; or just &, false.
     * @return string The string to go in the URL
     */

    public function genUrl($returnTo = false, $useAmp = true)
    {
        $returnTo = (!$returnTo) ? (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'] : $returnTo;

        $params = array(
            'openid.ns'			=> 'http://specs.openid.net/auth/2.0',
            'openid.mode'		=> 'checkid_setup',
            'openid.return_to'	=> $returnTo,
            'openid.realm'		=> (!empty($_SERVER['HTTPS']) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'],
            'openid.identity'	=> 'http://specs.openid.net/auth/2.0/identifier_select',
            'openid.claimed_id'	=> 'http://specs.openid.net/auth/2.0/identifier_select',
        );

        $sep = ($useAmp) ? '&amp;' : '&';
        return self::STEAM_LOGIN . '?' . http_build_query($params, '', $sep);
    }

    /**
     * Validate the incoming data
     *
     * @return string Returns the SteamID64 if successful or empty string on failure
     * @Route("/steam/validate", name="login_validate")
     */
    public static function validate()
    {
        // Star off with some basic params
        $params = array(
            'openid.assoc_handle'	=> $_GET['openid_assoc_handle'],
            'openid.signed'			=> $_GET['openid_signed'],
            'openid.sig'			=> $_GET['openid_sig'],
            'openid.ns'				=> 'http://specs.openid.net/auth/2.0',
        );

        ladybug_dump($params);

        // Get all the params that were sent back and resend them for validation
        $signed = explode(',', $_GET['openid_signed']);
        foreach($signed as $item)
        {
            $val = $_GET['openid_' . str_replace('.', '_', $item)];
            $params['openid.' . $item] = get_magic_quotes_gpc() ? stripslashes($val) : $val;
        }

        // Finally, add the all important mode.
        $params['openid.mode'] = 'check_authentication';

        // Stored to send a Content-Length header
        $data =  http_build_query($params);
        $context = stream_context_create(array(
            'http' => array(
                'method'  => 'POST',
                'header'  =>
                    "Accept-language: en\r\n".
                    "Content-type: application/x-www-form-urlencoded\r\n" .
                    "Content-Length: " . strlen($data) . "\r\n",
                'content' => $data,
            ),
        ));

        $result = file_get_contents(self::STEAM_LOGIN, false, $context);
        ladybug_dump($result);

        // Validate wheather it's true and if we have a good ID
        preg_match("#^http://steamcommunity.com/openid/id/([0-9]{17,25})#", $_GET['openid_claimed_id'], $matches);
        $steamID64 = is_numeric($matches[1]) ? $matches[1] : 0;
        ladybug_dump($_SESSION);
        ladybug_dump_die($steamID64);

        // Return our final value
        echo  preg_match("#is_valid\s*:\s*true#i", $result) == 1 ? $steamID64 : '';
        die();
    }


    /**
     * @Route("/get/pricehistory/{weapon}")
     */
    public function getWeaponPriceHistoryAction($weapon = null)
    {

        $url = "http://steamcommunity.com/market/pricehistory/?appid=730&market_hash_name=AWP+%7C+Asiimov+%28Field-Tested%29";

//        $cookie_string = "steamLogin=76561198122003514%7C%7CEF5C25694485FD406021188629D12A96B7B75676";
        $cookie_string = "steamLogin=76561198122003514%7C%steamcommunity.com";

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($curl, CURLOPT_COOKIE, $cookie_string);
        $data = curl_exec($curl);
        curl_close($curl);

        $data = json_decode($data);
        ladybug_dump_die($data->prices);



//        $url = "http://steamcommunity.com/market/pricehistory/";
//
//        $data = array(
//            'appid'=> "730",
//			'market_hash_name'=>"AWP | Asiimov (Field-Tested)"
//        );
//
//        echo http_build_query($data) . "\n";
//        $query = http_build_query($data, '', '&amp;');
//        $url = $url . '?' . $query;
//        echo $url;


//        $url = "http://steamcommunity.com/market/pricehistory/?appid=730&market_hash_name=AWP+%7C+Asiimov+%28Field-Tested%29";
//        $url = "http://steamcommunity.com/market/pricehistory/?appid=730&market_hash_name=AWP%20%7C%20Asiimov%20(Field-Tested)";

        die();
    }


}
